<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name=viewport content="width=device-width,initial-scale=1">
    <link rel="stylesheet" href="/assets/styles.css">
    <link href=/favicon.ico rel="shortcut icon" type=image/x-icon>
    <style>
        *,
        *::before,
        *::after {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            width: 100%;
            height: 100%;
            background: #f8f8f8;
            font-family: sans-serif;
        }

        header {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 10vh;
        }

        .title {
            font-size: 60px;
        }

        main {
            height: 80vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            max-width: 100%;
        }
        .loader {
            border: 16px solid #f3f3f3; 
            border-top: 16px solid #3498db; 
            border-radius: 50%;
            width: 120px;
            height: 120px;
            animation: spin 2s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
    <title>Solar panel watch | <%= __('Debug device')%></title>
  </head>
  <body>
    <header>
      <h2 class="title">Solar panel watch</h2>
    </header>
    <main>
        <h3><%= __("Debug device")%></h3>
        <a href="/device/<%= device_name %>/graph/24h"><%= __("Raw data 1d")%></a>
        <a id="get-energy" href="#"><%= __("Get energy used by device 1d")%></a>
        <ul id="table"></ul>
        <div id="loader" class="loader"></div>
    </main>
    <script>
        const prettyDate = (date) => {
            date = new Date(date);
            return ((date.getDate() < 10) ? '0': '') + date.getDate() + '/' + ((date.getMonth()+1 < 10) ? '0': '') + (date.getMonth()+1) + '/' + date.getFullYear() +  ' ' + ((date.getHours() < 10) ? '0': '') + date.getHours() + ':'  + ((date.getMinutes() < 10) ? '0': '') + date.getMinutes() + ':'  + ((date.getSeconds() < 10) ? '0': '') + date.getSeconds();
        }
        const prettyName = (name) => {
            name = name.replaceAll('-', ' ');
            let words = name.split(' ');
            return words.map((word) => { 
                return word[0].toUpperCase() + word.substring(1); 
            }).join(' ');
        }
        const createLi = (label, value) => {
            var li1 = document.createElement('li');
            li1.innerHTML = '<b>' + label + '</b>: ' + value;
            return li1;
        }
        const loadData = () => {

            const fetchData = fetch('/api/device/<%= device_name %>/debug')
                .then(response => response.json())
            
            fetchData.then(data => {
                    var ul = document.getElementById('table');

                    var items = [
                        { key: '<%= __("Device name")%>', value: prettyName('<%= device_name %>') },
                        { key: '<%= __("Last call")%>', value: prettyDate(data.last_call) },
                        { key: '<%= __("Time period")%>', value: Math.floor(data.time_limit/1000) + 's' },
                        { key: '<%= __("Status")%>', value: (data.activated) ? '<%= __("Activated")%>': '<%= __("Disabled")%>' },
                        { key: '<%= __("Decision")%>', value: (data.toggle) ? '<%= __("To enable")%>': '<%= __("To disable")%>' },
                        { key: '<%= __("Decision (advanced)")%>', value: (data.toggle_advanced) ? '<%= __("To enable")%>': '<%= __("To disable")%>' },
                        { key: '<%= __("Power limit")%>', value: data.limit + ' W' },
                        { key: '<%= __("Current power")%>', value: Math.floor(data.power) + ' W' },
                        { key: '<%= __("Last alpha")%>', value: data.last_alpha },
                        { key: '<%= __("Requested alpha")%>', value: data.requested_alpha },
                        { key: '<%= __("Last power command")%>', value: Math.floor(data.last_power) + ' W' },  
                        { key: '<%= __("Requested power command")%>', value: Math.floor(data.requested_power) + ' W' },
                        { key: '<%= __("Power threshold percentage")%>', value: data.power_threshold_percentage*100 + ' %' },
                        { key: '<%= __("Type")%>', value: data.type },
                        { key: '<%= __("Forcing status")%>', value: (data.force_mode) ? '<%= __("enabled forcing")%>': '<%= __("disabled forcing")%>' },
                        { key: '<%= __("Forcing percent")%>', value: (data.force_mode_percent*100) + ' %'}
                    ]
                    for (var i = 0; i < items.length; i++) {
                        ul.appendChild(createLi(items[i].key, items[i].value));
                    }
                    document.getElementById('loader').style.display = 'none';
            })
            .catch(error => {
                    console.error('Error:', error);
            });
        }
        document.getElementById("get-energy").addEventListener('click', (event) => {
            event.preventDefault();
            let ul = document.getElementById('table');
            fetch('/api/device/<%= device_name %>/debug/energy/24h/')
              .then((response) => {
                return response.json();
               })
              .then((data) => {
                ul.appendChild(createLi('<%= __("Energy used by device 1d")%> (' + prettyDate((new Date()).getTime()) + ')', data.value  + ' ' + data.unit ));
              })
              .catch((error) => console.error(error));
        });
        window.addEventListener('load', loadData);
    </script>
  </body>
</html>