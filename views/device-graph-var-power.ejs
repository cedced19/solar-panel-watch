<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name=viewport content="width=device-width,initial-scale=1">
    <link rel="stylesheet" href="/assets/styles.css">
    <link href=/favicon.ico rel="shortcut icon" type=image/x-icon>
    <style>
        *,
        *::before,
        *::after {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            width: 100%;
            height: 100%;
            background: #f8f8f8;
            font-family: sans-serif;
        }

        header {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 10vh;
        }

        .title {
            font-size: 60px;
        }

        main {
            height: 80vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            max-width: 100%;
        }

        .graphs-title {
            margin: 30px auto;
        }

        #graphs-container {
            height: 70%;
            width: 100%;
        }
        .loader {
            border: 16px solid #f3f3f3; 
            border-top: 16px solid #3498db; 
            border-radius: 50%;
            width: 120px;
            height: 120px;
            animation: spin 2s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
    <title>Solar panel watch | <%= __('Graph')%></title>
  </head>
  <body>
    <header>
      <h2 class="title">Solar panel watch</h2>
    </header>
    <main>
      <div id="loader" class="loader"></div>
      <div id="graphs-container"></div>
    </main>
    <script src="/assets/plotly.js"></script>
    <script>
        const loadData = () => {
            let firstTrace;
            let secondTrace;
            let thirdTrace;

            const deviceURI =  '<%= device_name %>';
            const prettyName = (name) => {
                name = name.replaceAll('-', ' ');
                let words = name.split(' ');
                return words.map((word) => { 
                    return word[0].toUpperCase() + word.substring(1); 
                }).join(' ');
            }

            const plotly = (traces) =>{
                const layout = {
                    title: '<%= label %> - <%= __("Power")%> - ' + prettyName(deviceURI),
                    width: window.innerWidth,
                    height: window.innerHeight*0.8,
                    autoscale: true,
                    yaxis: {title: '<%= label %>'},
                    yaxis2: {
                        title: '<%= __("Power")%> (W)',
                        overlaying: 'y',
                        side: 'right'
                    }
                };
                return Plotly.newPlot('graphs-container', traces, layout);
            }

            const unpackData = (arr, key) => {
                return arr.map(obj => obj[key])
            }
            function convertTZ(date, tzString) {
                return new Date(((typeof date === "string" || typeof date === "number") ? new Date(date) : date).toLocaleString("en-US", {timeZone: tzString}));   
            }
            const applyTZ = (arr) => {
                return arr.map(obj => convertTZ(obj, "<%= timezone %>"));
            }

            const fetchData = () =>{
                firstTrace = fetch('/api/data/var/<%= device_name %>/<%= period%>')
                .then(response => response.json())
                .then(data => {
                    
                    const traceData = {
                        type: 'scatter',
                        mode: 'lines',
                        name: '<%= label %>',
                        x: applyTZ(unpackData(data, '_time')),
                        y: unpackData(data, '_value'),
                        line: {color: '#c0392b'}
                    }   
                    return traceData      
                }).catch((error) => {
                    console.error('Error:', error);
                });
                secondTrace = fetch('/api/data/power/<%= device_name %>/<%= period%>')
                .then(response => response.json())
                .then(data => {
                    const traceData = {
                        type: 'scatter',
                        mode: 'lines',
                        name: '<%= __("Power")%> (W)',
                        x: applyTZ(unpackData(data, '_time')),
                        y: unpackData(data, '_value'),
                        line: {color: '#34495e',shape: 'hv'},
                        yaxis: 'y2',
                    } 
                    return traceData        
                }).catch((error) => {
                    console.error('Error:', error);
                });
                return [firstTrace, secondTrace];
            }

            [firstTrace, secondTrace] = fetchData()
            
            Promise.all([firstTrace, secondTrace]).then((values) => {
                plotly([values[0], values[1]]);
                document.getElementById('loader').style.display = 'none';
            });   
        }
        window.addEventListener('load', loadData);
    </script>
  </body>
</html>